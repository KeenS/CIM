#!/bin/sh -
# This file is for load

. "$CIM_HOME/scripts/cim_utils"

__get_download_path(){
    case "$1" in
        clisp) echo "http://ftp.gnu.org/pub/gnu/clisp/release/$2/clisp-$2.tar.gz" ;;
        ecl) echo "http://downloads.sourceforge.net/project/ecls/ecls/${2%.*}/ecl-${2}.tgz" ;;
        abcl) echo "http://abcl.org/releases/$2/abcl-bin-$2.tar.gz" ;;
        sbcl) echo "http://downloads.sourceforge.net/project/sbcl/sbcl/$2/sbcl-$2-source.tar.bz2" ;;
        sbcl-bin)
            { grep "`uname`	`cim_sbcl_arch`" "$CIM_HOME/res/sbcl-bin_url" ||
                { cim_error "SBCL binary does not support your machine."; return 1;}
            } | cut -f 3
            ;;
        ccl)
            if cim_ccl_arch > /dev/null; then
                echo  "ftp://ftp.clozure.com/pub/release/$2/ccl-$2-`cim_ccl_arch`.tar.gz"
            else
                cim_error "CCL does not support your machine."
                return 1
            fi
            ;;
        alisp)
            if expr `cim_arch` : 'intel/.*' > /dev/null 2>&1 ; then
                vname=`echo "$2" | tr -d \.`
                case `uname` in
                    Linux)
                        echo "http://www.franz.com/ftp/pub/acl${vname}express/linux86/acl${vname}express-linux-x86.bz2"
                        return 0
                        ;;
                    Darwin)
                        echo "http://www.franz.com/ftp/pub/acl${vname}express/macosx86/acl${vname}express-macosx-x86.dmg"
                        return 0
                        ;;
                    FreeBSD)
                        echo "http://www.franz.com/ftp/pub/acl${vname}express/freebsd/acl${vname}express-freebsd-x86.bz2"
                        return 0
                        ;;
                esac
            fi
            cim_error "ALISP does not support your machine."
            return 1
            ;;
        *)
            cim_error "$1 is not supported"
            return 1
            ;;
    esac
}

cim_svn_get(){
    cim_run_if_installed svn checkout "$1" "$2"
}

cim_hg_get(){
    cim_run_if_installed hg clone "$1" "$2"
}

cim_git_get(){
    cim_run_if_installed git clone "$1" "$2"
}

cim_svn_up(){
    cim_run_if_installed svn update
}

cim_hg_up(){
    cim_run_if_installed hg pull --update
}

cim_git_up(){
    cim_run_if_installed git pull origin master
}

cim_vcs_checkout(){
    # :TODO: support branch checkout
    case "$1" in
        abcl)
            cim_svn_get http://abcl.org/svn "$2"
        ;;
        ccl)
            if cim_ccl_arch > /dev/null; then
                cim_svn_get "http://svn.clozure.com/publicsvn/openmcl/trunk/`cim_ccl_arch`/ccl" "$2"
            else
                cim_error"CCL don't support your machine"
                exit 1
            fi
        ;;
        clisp)
            cim_hg_get http://hg.code.sf.net/p/clisp/clisp "$2"
        ;;
        ecl)
            cim_git_get git://git.code.sf.net/p/ecls/ecl "$2"
        ;;
        mkcl)
            cim_git_get git://common-lisp.net/projects/mkcl/mkcl.git "$2"
        ;;
        sbcl)
            cim_git_get git://git.code.sf.net/p/sbcl/sbcl "$2"
        ;;
    esac
}

cim_vcs_up(){
    case "$1" in
        abcl)
            (cd "$2"; cim_svn_up)
            ;;
        ccl)
            (cd "$2"; cim_svn_up)
            ;;
        clisp)
            (cd "$2"; cim_hg_up)
            ;;
        ecl)
            (cd "$2"; cim_git_up)
            ;;
        mkcl)
            (cd "$2"; cim_git_up)
            ;;
        sbcl)
            (cd "$2"; cim_git_up)
            ;;
    esac
}


__impl_installed_p(){
    [ -d "$CIM_HOME/impls/$1-$2" ]
}

__install_running_p(){
    [ -f "$CIM_HOME/tmp/$1-$v2.lock" ]
}

__start(){
    if __impl_installed_p "$1" "$2"; then
        cim_error "It seems you have installed $1-$2. Did you mean 'cim reinstall $1-$2'?."
        return 1
    fi
    if __install_running_p "$1" "$2"; then
        cim_error "You have been already running $1-$2 installation."
        return 1
    fi
    trap "exit 1" HUP INT PIPE QUIT TERM
    trap "rm -f $CIM_HOME/tmp/$1-$2.lock" EXIT
    mkdir -p "$CIM_HOME/tmp/"
    touch "$CIM_HOME/tmp/$1-$2.lock"
    mkdir -p "$CIM_HOME/log/$1-$2"
    cim_message "$1-$2 installation started."
}

__download(){
    if [ "$2" = head ];then
        cim_message "Checking out repository."
        if [ ! -d "$CIM_HOME/src/$1-$2" ]; then
            mkdir -p "$CIM_HOME/src/"
            cim_with_output_control "$1-$2" "checkout" cim_vcs_checkout "$1" "$CIM_HOME/src/$1-$2"
        fi
        if [ "$?" != "0" ]; then
            cim_error "Failed to checkout."
            cim_cat_errlog "$1-$2" "checkout"
            exit 1
        fi
    else
        cim_message "Downloading archive."
        impl_archive="$CIM_HOME/archives/$1-$2.tar.`cim_distribution_archive_type "$1"`"
        
        url=`__get_download_path "$1" "$2"`
        [ "$?" = 0 ] || exit $?
        
        if [ ! -f "$impl_archive" ] || [ -n "$url" ]; then
            mkdir -p "$CIM_HOME/archives/"
            cim_with_output_control "$1-$2" "download" cim_wget "$url" "$impl_archive"
        fi
        if [ "$?" != "0" ]; then
            cim_error "Failed to download."
            cim_cat_errlog "$1-$2" "download"
            exit 1
        fi
    fi
}

cim_expand(){
    if [ "$1" = "gz" ];then
        cmd="gzip"
    elif [ "$1" = "bz2" ];then
        cmd="bzip2"
    fi
    $cmd -dc "$2" | tar -xf - -C "$3"
}
__expand(){
    if [ "$2" != head ]; then
        cim_message "Expanding archive."

        dist="$1-$2.tar.`cim_distribution_archive_type "$1"`"
        type="`cim_distribution_archive_type "$1"`"

        rm -rf  "$CIM_HOME/src/$1-$2"
        mkdir -p "$CIM_HOME/src"
        cim_with_output_control "$1-$2" "expand" cim_expand "$type" "$CIM_HOME/archives/$dist" "$CIM_HOME/src"

        if [ "$?" != "0" ]; then
            cim_error "Failed to expand."
            cim_cat_errlog "$1-$2" "expand"
            exit 1
        fi
        
        if  [ "$1" = ccl ];then
            mv "$CIM_HOME/src/$1" "$CIM_HOME/src/$1-$2"
        fi
    fi
}
__configure(){
    [ -n "$IN_RESUME" ] && rm -f "$CIM_HOME/src/$1-$2/src/confg.cache"
    [ "$1" = "ecl" ]    && flags="$flags --mandir=$CIM_HOME/share/man"
    [ "$1" = "clisp" ]  && flags="$flags --mandir=$CIM_HOME/share/man"
    cim_message "Configueing $1-$2"
    (cd "$CIM_HOME/src/$1-$2" &&
     cim_with_output_control "$1-$2" "configure" ./configure $flags --prefix="$CIM_HOME/impls/$1-$2")
    if [ "$?" != "0" ]; then
        cim_error "Failed to configure."
        cim_cat_errlog "$1-$2" "configure"
        exit 1
    fi
}
__impl_src_dir(){
    if [ "$1" = "clisp" ]; then
        echo "$CIM_HOME/src/$1-$2/src"
    else
        echo "$CIM_HOME/src/$1-$2"
    fi
}
__make(){
    cim_message "Building $1-$2"
    (cd `__impl_src_dir "$1" "$2"` &&
     cim_with_output_control "$1-$2" "make" make)
    if [ "$?" != "0" ]; then
        cim_error "Failed to make."
        cim_cat_errlog "$1-$2" "make"
        exit 1
    fi

}

__doc(){
    mkdir -p "$CIM_HOME/share/man"
    # if [ "$1" = "sbcl" ] ;then
    # (cd "$CIM_HOME/src/$1-$2/doc/manual" && make)
    # fi
    return $?
}

__install(){
    cim_message "Installing $1-$2"
    mkdir -p "$CIM_HOME/impls/$1-$2" &&
    (cd `__impl_src_dir "$1" "$2"` &&
     cim_with_output_control "$1-$2" "install" make install)
    if [ "$?" != "0" ]; then
        cim_error "Failed to install."
        cim_cat_errlog "$1-$2" "install"
        exit 1
    fi
    return $?
}
__link(){
    cim_message "Making symlink."
    rm -f  "$CIM_HOME/bin/$1-$2"
    ln -s "$CIM_HOME/impls/$1-$2/bin/$1" "$CIM_HOME/bin/$1-$2"
    [ -e "$CIM_HOME/bin/$1" ] || ln -s "$CIM_HOME/scripts/$1" "$CIM_HOME/bin/$1"
    return $?
}
__config_cim(){
    cim_message "Adding $1-$2 configuration."
    if [ ! -s "$CIM_HOME/config/default" ]; then
        echo "LISP_IMPL=$1-$2" > "$CIM_HOME/config/default"
        echo "$1=$1-$2" >> "$CIM_HOME/config/default"
    fi
    if [ -s "$CIM_HOME/config/current.$CIM_ID" ]; then
        if ! grep  "^$1=" "$CIM_HOME/config/current.$CIM_ID" > /dev/null 2>&1; then
            echo "$1=$1-$2" >> "$CIM_HOME/config/current.$CIM_ID"
        fi
    else
        cp "$CIM_HOME/config/default" "$CIM_HOME/config/current.$CIM_ID"
    fi
    return $?    
}
__install_ql_if_need(){
    if [ ! -d "$CIM_HOME/quicklisp/" ]; then
        cim_message "Installing quicklisp."
        rm -f "$CIM_HOME/quicklisp"
        rm -f "$CIM_HOME/lib/quicklisp.lisp"
        cim_wget "http://beta.quicklisp.org/quicklisp.lisp" "$CIM_HOME/lib/quicklisp.lisp"
        LISP_IMPL="$1-$2";export LISP_IMPL
        if [ "$1" = sbcl ]; then
            cim_set_sbcl_home_for "$1-$2"
        fi
        cim_with_output_control "$1-$2" quicklisp ql deps --path "$CIM_HOME/quicklisp/"
        if [ "$?" != "0" ]; then
            cim_error "Failed to install quicklisp."
            cim_cat_errlog "$1-$2" "quicklisp"
            exit 1
        fi
        return $?
    fi
}

__sbcl_ensure_impl(){
    cim_message "Finding Lisp impl to build sbcl."
    if __which sbcl > /dev/null;then
        found=`__which sbcl`
        touch "$CIM_HOME/src/$1-$2/.cim_available_impl"
    elif __which lisp > /dev/null;then
        found=`__which lisp`
        echo "lisp -batch" > "$CIM_HOME/src/$1-$2/.cim_available_impl"
    elif __which ccl > /dev/null;then
        found=`__which ccl`
        echo "ccl --batch" > "$CIM_HOME/src/$1-$2/.cim_available_impl"
    elif __which clisp > /dev/null;then
        found=`__which clisp`
        echo "clisp -batch" > "$CIM_HOME/src/$1-$2/.cim_available_impl"
    elif { run_sbcl=`find $CIM_HOME/tmp/ -maxdepth 2 -name run-sbcl.sh | head -n 1 2> /dev/null` ; [ -n "$run_sbcl" ];};then
        found="$run_sbcl"
        echo "$run_sbcl --disable-debugger --no-userinit --no-sysinit" > "$CIM_HOME/src/$1-$2/.cim_available_impl"
    elif { url=`__get_download_path sbcl-bin`; [ -n "$url" ]; };then
        found="$url"
        cim_wget "$url" - | bzip2 -dc - | tar -xf - -C "$CIM_HOME/tmp/" &&
        echo "`find $CIM_HOME/tmp/ -maxdepth 2 -name run-sbcl.sh 2> /dev/null | head -n 1 ` --disable-debugger --no-userinit --no-sysinit" > "$CIM_HOME/src/$1-$2/.cim_available_impl"
    else
        cim_error "No CL implementation for compiling SBCL found. Please install another implementation first."
        exit 1
    fi
    cim_message "  Found: $found"
    unset found

}
__sbcl_make(){
    cim_message "Building $1-$2"
    (cd "$CIM_HOME/src/$1-$2" &&
     cim_with_output_control "$1-$2" "build" sh make.sh "`cat .cim_available_impl`" --prefix="$CIM_HOME/impls/$1-$2" $flags )
    if [ "$?" != "0" ]; then
        cim_error "Failed to build."
        cim_cat_errlog "$1-$2" "build"
        exit 1
    fi
}
__sbcl_install(){
    cim_message "Installing $1-$2"
    mkdir -p "$CIM_HOME/impls/$1-$2"
    (cd "$CIM_HOME/src/$1-$2" &&
     SBCL_HOME="$CIM_HOME/impls/$1-$2/lib/sbcl";export SBCL_HOME
     INSTALL_ROOT="$CIM_HOME/impls/$1-$2";export INSTALL_ROOT
     cim_with_output_control "$1-$2" "install"  sh install.sh)
    if [ "$?" != "0" ]; then
        cim_error "Failed to install."
        cim_cat_errlog "$1-$2" "install"
        exit 1
    fi
}

__ccl_rebuild_full(){
    cim_message "Building $1-$2"

    case `cim_arch` in
        */64/*)
            logic="!";;
        *)
        ;;
    esac

    executable=`find "$CIM_HOME/src/$1-$2/" -maxdepth 1 -perm +111 -type f $logic -name '*64' 2> /dev/null ` ||
    return 1
    cim_with_output_control "$1-$2" "build" "$executable" --no-init --eval '(rebuild-ccl :full t)' --eval '(quit)'
    if [ "$?" != "0" ]; then
        cim_error "Failed to build."
        cim_cat_errlog "$1-$2" "build"
        exit 1
    fi

}
__ccl_install(){
    cim_message "Installing $1-$2"
    cp -R "$CIM_HOME/src/$1-$2" "$CIM_HOME/impls/$1-$2"
    find "$CIM_HOME/impls/$1-$2/scripts/" -maxdepth 1 -name 'ccl*' \
         -exec sed -i".sample" -e "/CCL_DEFAULT_DIRECTORY=/ s;=/.*\$;=\"$CIM_HOME/impls/$1-$2\";" '{}' ';'
    mkdir -p "$CIM_HOME/impls/$1-$2/bin"
    case `cim_arch` in
        */64/*)
            ln -s  "$CIM_HOME/impls/$1-$2/scripts/ccl64" "$CIM_HOME/impls/$1-$2/bin/$1" ;;
        *)
            ln -s  "$CIM_HOME/impls/$1-$2/scripts/ccl" "$CIM_HOME/impls/$1-$2/bin/$1" ;;
    esac
}

__abcl_install(){
    cim_message "Installing $1-$2"
    cp -R "$CIM_HOME/src/$1-bin-$2" "$CIM_HOME/impls/$1-$2"
    mkdir -p  "$CIM_HOME/impls/$1-$2/bin"
    cat<<EOF > "$CIM_HOME/impls/$1-$2/bin/abcl"
#!/bin/sh
java -classpath $CIM_HOME/impls/$1-$2/abcl-contrib.jar \\
 -server -Xrs \\
 -jar $CIM_HOME/impls/$1-$2/abcl.jar "\$@"
EOF
    chmod u+x "$CIM_HOME/impls/$1-$2/bin/abcl"
}

__alisp_install(){
    cim_message "Installing $1-$2"
    vname=`echo "$2" | tr -d \.`
    mkdir -p "$CIM_HOME/impls/"
    cp -R "$CIM_HOME/src/acl${vname}express" "$CIM_HOME/impls/$1-$2"
    ln -s "$CIM_HOME/impls/$1-$2/alisp" "$CIM_HOME/impls/$1-$2/bin/alisp"
}

