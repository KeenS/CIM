#!/bin/sh -
CIM_UTILS=true
impls="abcl alisp ccl clisp ecl lisp sbcl"

cim_black(){
    echo "[0;30m$@[0;39m"
}
cim_red(){
    echo "[0;31m$@[0;39m"
}
cim_green(){
    echo "[0;32m$@[0;39m"
}
cim_yellow(){
    echo "[0;33m$@[0;39m"
}
cim_blue(){
    echo "[0;34m$@[0;39m"
}
cim_magenta(){
    echo "[0;35m$@[0;39m"
}
cim_cyan(){
    echo "[0;36m$@[0;39m"
}
cim_white(){
    echo "[0;37m$@[0;39m"
}
cim_message(){
    echo "$1"
}
cim_error(){
    echo "$1" >&2
}

cim_wget(){
    if __which curl > /dev/null;then
	curl -Ss -L "$1" -o "$2"
    elif __which wget > /dev/null;then
	wget -q "$1" -O "$2"
    elif __which fetch > /dev/null;then
	fetch "$1" -o "$2"
    elif __which tclsh > /dev/null;then
	echo 'package require http ; if {"[lindex $argv 2]" == "-"} {set chan stdout} else {set chan [file open "[lindex $argv 2]"]} ; ::http::geturl "[lindex $argv 1]" -channel $chan' | tclsh - $1 $2
    elif __which ruby > /dev/null;then
	ruby -ropen-uri -e "out = ARGV[1] == '-' ? STDOUT : open('ARGV[1]');out.write open(ARGV[0]).read" "$1" "$2"
    fi
}

cim_match(){
    expr "$1" : "$2" > /dev/null
}

cim_with_output_control(){
    impl="$1"
    step="$2"
    shift 2
    output="$CIM_HOME/log/$impl/$step.log"
    err="$CIM_HOME/log/$impl/$step.err"
    touch "$output" "$err"
    "$@" > "$output"  2> "$err"
    return $?
}

cim_cat_errlog(){
    impl="$1"
    step="$2"
    tail -n 10 "$CIM_HOME/log/$impl/$step.log"
    cat "$CIM_HOME/log/$impl/$step.err"
}


cim_split_impl_version(){
    echo "$1" | tr - \  
}

cim_normarize_impl_version(){
    if cim_match "$1" ".*-.*"; then
        echo "$1"
    else
        cat "$CIM_HOME/res/known" |
            grep -F "$impl" | 
            grep -F "latest" |
            cut -s -f2,3 | {
            read impl version;
            if [ -z "$impl$version" ]; then
                cim_error "Error:cim_split_impl_version: invalid argument '$1'"
                return 1            
            fi
            echo "$impl-$version"
        }
    fi
}

cim_validate_impl_version(){
    grep -vF "#" "$CIM_HOME/res/known" | cut -f2,3 | {
        while read proper_impl proper_version; do
            if [ "$1" = "$proper_impl" ] &&
                   [ "$2" = "$proper_version" ]; then
                return 0
            fi
        done
    }
    return 1

}

cim_aware_system_lisp(){
    for impl in $impls;do
        rm -f "$CIM_HOME/bin/${impl}-system"
        if lisp_full_name=`PATH="/bin:/usr/bin:/usr/local/bin:/opt/bin" __which "$impl" 2> /dev/null` ;then
	    ln -s "$lisp_full_name" "$CIM_HOME/bin/${impl}-system"
	    [ -s "$CIM_HOME/config/default" ] || echo "LISP_IMPL=${impl}-system" > "$CIM_HOME/config/default"
        fi
    done
}

cim_choose_one_version(){
    # FIXME: select more preferer version
    echo "$2" | sort -rn | head -n 1
}

cim_register_all_impls(){
    for impl in $impls; do
        installed=`find "$CIM_HOME/bin/" -mindepth 1 -name "$impl-*" -exec basename '{}' ';' 2> /dev/null `
        if [ -n "$installed" ];then
            for config in `find "$CIM_HOME/config/" -mindepth 1 2> /dev/null `; do
                if ! grep "^$impl" "$config" > /dev/null 2>&1; then
                    echo "$impl=`cim_choose_one_version "$impl" "$installed"`" >> "$config"
                fi
            done
        fi
    done
}
                         
cim_set_sbcl_home_for(){
    if [ "$1" = "sbcl-system" ];then
	expr `ls -l "$CIM_HOME/bin/sbcl-system" | awk '{print $NF}'` : '\(.*\)/bin/sbcl' | { read sbcl_base; SBCL_HOME="${sbcl_base}/lib/sbcl";}
    else
	SBCL_HOME="$CIM_HOME/impls/`cim_normarize_impl_version $1`/lib/sbcl"
    fi
}

cim_arch(){
    case `uname -m` in
        x86|i386|i686|i686-AT386)
            echo intel/32/l ;;
        x86_64|i686-64|amd64)
            echo intel/64/l ;;
        armv6l)
            echo arm6/32/l;;
        armv7l)
            echo arm7/32/l;;
        ppc|"Power Macintosh"|AIX)
            echo ppc/32/b;;
        ppc64)
            echo ppc/64/b;;
        sparc)
            echo sparc/32/b;;
        sparc64)
            echo sparc/64/b;;
        alpha)
            echo alpha/32/l;;
        mips|IP22|IP30|IP35)
            echo mips/32/l;;
    esac
}

cim_sbcl_arch(){
    case `cim_arch` in
        intel/64/*)
            echo x86_64 ;;
        intel/32/*)
            echo x86 ;;
        ppc/*)
            echo ppc ;;
        sparc/*)
            echo sparc ;;
        alpha/*)
            echo alpha ;;
        mips/*/l)
            echo mipsle ;;
        mips/*/b)
            echo mipsbe ;;
        arm*)
            if [ -z `readelf -A /proc/self/exe | grep Tag_ABI_VFP_args` ]; then
                echo armel
            else
                echo armhf
            fi
            ;;
    esac
}

cim_ccl_arch(){
    # supported are:
    # + androidarm
    # + darwinx86
    # + freebsdx86
    # + linuxarm
    # + linuxppc
    # + linuxx86
    # + solarisx86
    # + windows
    case `cim_arch` in
        intel/*)
            echo "`uname | tr A-Z a-z`x86"
            return 0
            ;;
        arm*)
            if [ "`uname`" = "Linux" ];then
                echo "linuxarm"
                return 0
            fi
            ;;
        ppc*)
            if [ "`uname`" = "Linux" ];then
                echo "linuxppc"
                return 0
            fi
            ;;
    esac
    echo ""
    return 1

}

cim_distribution_archive_type(){
    case $1 in
        sbcl|alisp) echo bz2;;
        abcl|ccl|clisp|ecl) echo gz;;
    esac
   [ "$1" = "sbcl" ] || [ "$1" = "alisp" ]
}


__sed_i(){
    sed -e "$1" "$2" > "$CIM_HOME/tmp/`basename $2`.bck.$CIM_ID"
    mv "$CIM_HOME/tmp/`basename $2`.bck.$CIM_ID" "$2"
}

__which(){
    command -v "$1" 2> /dev/null
}

cim_run_if_installed(){
    if __which "$1" > /dev/null; then
        "$@"
    else
        cim_error "You need install `$1`"
        return 1
    fi
}

