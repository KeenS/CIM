#!/bin/sh
. "$CIM_HOME/scripts/cim_utils"
. "$CIM_HOME/test/cim_test_utils"

test_cim_wget__file(){
    if cim_test_full_p;then
        cim_wget "https://github.com/KeenS/CIM/README.md" "${outputDir}/README.md1" 2> /dev/null
        assertEquals "cim_wget didn't work" 0 $?
        assertTrue "cim_wget didn't work" '[ -s "${outputDir}/README.md1" ]'
    fi
}

test_cim_wget__output(){
    if cim_test_full_p;then
        cim_wget "https://github.com/KeenS/CIM/README.md" - > "${outputDir}/README.md2" 2> /dev/null
        assertEquals "cim_wget to stdouw didn't work" \
                     0 $?
        assertTrue "cim_wget to stdouw didn't work" \
                   '[ -s "${outputDir}/README.md2" ]'
    fi
}

test_cim_wget__content(){
    if cim_test_full_p;then
        assertEquals "content got by previouse tests was different" \
        "`cat "${outputDir}/README.md1"`" "`cat "${outputDir}/README.md2"`"
    fi
}

test_cim_split_impl_version__normal(){
    result=`cim_split_impl_version sbcl-${SBCL_DUMMY_VERSION} 2>"${stderrF}"`
    expected="sbcl ${SBCL_DUMMY_VERSION}"
    assertEquals "cim_split_impl_version didn't work: `cat "${stderrF}"`" \
                 "$expected" "$result"
    assertNull "`cat "${stderrF}"`"
}

test_cim_normalize_impl_version__latest(){
    result=`cim_normalize_impl_version sbcl 2>"${stderrF}"`
    expected="sbcl-${SBCL_LATEST}"
    assertEquals "cim_normalize_impl_version without version number didn't work" \
                 "$expected" "$result"
    assertNull "cim_normalize_impl_version echoed to stderr" \
               "`cat "${stderrF}"`"
}

test_cim_normalize_impl_version__error_invalid(){
    cim_normalize_impl_version aaa  >"${stdoutF}" 2>"${stderrF}"
    assertNotEquals 0 $?
    assertNull "cim_normarize_impl_version with invalid argument should not output but got `cat "${stdoutF}"`" \
               "`cat "${stdoutF}"`"
    assertNotNull "cim_normalize_impl_version with invalid argument should output to error" \
                  "`cat "${stderrF}"`"
}

test_cim_normalize_impl_version__error_null(){
    cim_normalize_impl_version  >"${stdoutF}" 2>"${stderrF}"
    assertNotEquals 0 $?
    assertNull "cim_normalize_impl_version with null argument should not output" \
               "`cat "${stdoutF}"`"
    assertNotNull "cim_normalize_impl_version with invalid argument should output to error" \
                  "`cat "${stderrF}"`"
}

test_cim_set_sbcl_home_for__normal(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl-${SBCL_DUMMY_VERSION}
    assertEquals "cim_sbcl_home_for" \
                 "$CIM_HOME/impls/sbcl-${SBCL_DUMMY_VERSION}/lib/sbcl" "$SBCL_HOME"
}

test_cim_set_sbcl_home_for__latest(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl
    assertEquals "cim_sbcl_home_for" \
                 "$CIM_HOME/impls/sbcl-${SBCL_LATEST}/lib/sbcl" "$SBCL_HOME"
}

test_cim_set_sbcl_home_for__system(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl-system
    assertNotNull "cim_sbcl_home_for sbcl-system" \
                  "$SBCL_HOME"
}

test__sed_i(){
    tmpfile="${outputDir}/sed_test"
    cat <<EOF > "$tmpfile"
foo
bar
baz
EOF
    __sed_i 's/foo/FOO/' "$tmpfile"
    assertEquals "cim_sed_i" \
                 "FOO
bar
baz" "`cat "$tmpfile"`"
}

test__which(){
    assertEquals "/bin/sh" `__which sh`
    __which no_such_executable > "${stdoutF}" 2> "${stderrF}"
    assertNotEquals "__which" 0 $?
    assertNull "`cat "${stdoutF}"`"
    assertNull "`cat "${stderrF}"`"
}

oneTimeSetUp()
{
  outputDir="${SHUNIT_TMPDIR}/test_cim_utils"
  mkdir "${outputDir}"
  stdoutF="${outputDir}/stdout"
  stderrF="${outputDir}/stderr"
}

run_tests
