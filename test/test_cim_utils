#!/bin/sh
. "$CIM_HOME/scripts/cim_utils"
. "$CIM_HOME/test/cim_test_utils"

test_cim_wget__file(){
    if cim_test_full_p;then
        cim_wget "https://github.com/KeenS/CIM/README.md" "${outputDir}/README.md1" 2> /dev/null
        assertEquals 0 $?
        assertTrue '[ -s "${outputDir}/README.md1" ]'
    fi
}

test_cim_wget__output(){
    if cim_test_full_p;then
        cim_wget "https://github.com/KeenS/CIM/README.md" - > "${outputDir}/README.md2" 2> /dev/null
        assertEquals 0 $?
        assertTrue '[ -s "${outputDir}/README.md2" ]'
    fi
}

test_cim_wget__content(){
    if cim_test_full_p;then
        assertEquals "`cat "${outputDir}/README.md1"`" "`cat "${outputDir}/README.md2"`"
    fi
}

test_cim_split_impl_version__normal(){
    result=`cim_split_impl_version sbcl-1.1.18 2>"${stderrF}"`
    expected="sbcl 1.1.18"
    assertEquals "$expected" "$result"
    assertNull "`cat "${stderrF}"`"
}

test_cim_split_impl_version__latest(){
    result=`cim_split_impl_version sbcl 2>"${stderrF}"`
    expected="sbcl ${SBCL_LATEST}"
    assertEquals "$expected" "$result"
    assertNull "`cat "${stderrF}"`"
}

test_cim_split_impl_version__error_invalid(){
    cim_split_impl_version aaa  >"${stdoutF}" 2>"${stderrF}"
    assertNotEquals 0 $?
    assertNull "`cat "${stdoutF}"`"
    assertNotNull "`cat "${stderrF}"`"
}

test_cim_split_impl_version__error_null(){
    cim_split_impl_version  >"${stdoutF}" 2>"${stderrF}"
    assertNotEquals 0 $?
    assertNull "`cat "${stdoutF}"`"
    assertNotNull "`cat "${stderrF}"`" "`cat "${stderrF}"`"
}

test_cim_set_sbcl_home_for__normal(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl-1.1.18
    assertEquals "$CIM_HOME/impls/sbcl-1.1.18/lib/sbcl" "$SBCL_HOME"
}

test_cim_set_sbcl_home_for__latest(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl
    assertEquals "$CIM_HOME/impls/sbcl-${SBCL_LATEST}/lib/sbcl" "$SBCL_HOME"
}

test_cim_set_sbcl_home_for__system(){
    SBCL_HOME=""
    cim_set_sbcl_home_for sbcl-system
    assertNotNull  "$SBCL_HOME"
}

test__sed_i(){
    tmpfile="${outputDir}/sed_test"
    cat <<EOF > "$tmpfile"
foo
bar
baz
EOF
    __sed_i 's/foo/FOO/' "$tmpfile"
    assertEquals "FOO
bar
baz" "`cat "$tmpfile"`"
}

test__which(){
    assertEquals "/bin/sh" `__which sh`
    __which no_such_executable > "${stdoutF}" 2> "${stderrF}"
    assertNotEquals 0 $?
    assertNull "`cat "${stdoutF}"`"
    assertNull "`cat "${stderrF}"`"
}

oneTimeSetUp()
{
  outputDir="${SHUNIT_TMPDIR}/test_cim_utils"
  mkdir "${outputDir}"
  stdoutF="${outputDir}/stdout"
  stderrF="${outputDir}/stderr"
}

run_tests

# echo "cim_choose_one_version"
# cim_choose_one_version sbcl "sbcl-1.1.17
# sbcl-1.1.18"
# echo cim_register_all_impls
# cim_register_all_impls
# echo normarize_impl_version
# cim_normarize_impl_version sbcl
